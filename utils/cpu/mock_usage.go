// Code generated by MockGen. DO NOT EDIT.
// Source: usage.go

// Package cpu is a generated GoMock package.
package cpu

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Usage mocks base method.
func (m *MockUser) Usage() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usage")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Usage indicates an expected call of Usage.
func (mr *MockUserMockRecorder) Usage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usage", reflect.TypeOf((*MockUser)(nil).Usage))
}

// MockProcessTracker is a mock of ProcessTracker interface.
type MockProcessTracker struct {
	ctrl     *gomock.Controller
	recorder *MockProcessTrackerMockRecorder
}

// MockProcessTrackerMockRecorder is the mock recorder for MockProcessTracker.
type MockProcessTrackerMockRecorder struct {
	mock *MockProcessTracker
}

// NewMockProcessTracker creates a new mock instance.
func NewMockProcessTracker(ctrl *gomock.Controller) *MockProcessTracker {
	mock := &MockProcessTracker{ctrl: ctrl}
	mock.recorder = &MockProcessTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessTracker) EXPECT() *MockProcessTrackerMockRecorder {
	return m.recorder
}

// TrackProcess mocks base method.
func (m *MockProcessTracker) TrackProcess(pid int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackProcess", pid)
}

// TrackProcess indicates an expected call of TrackProcess.
func (mr *MockProcessTrackerMockRecorder) TrackProcess(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackProcess", reflect.TypeOf((*MockProcessTracker)(nil).TrackProcess), pid)
}

// UntrackProcess mocks base method.
func (m *MockProcessTracker) UntrackProcess(pid int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UntrackProcess", pid)
}

// UntrackProcess indicates an expected call of UntrackProcess.
func (mr *MockProcessTrackerMockRecorder) UntrackProcess(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntrackProcess", reflect.TypeOf((*MockProcessTracker)(nil).UntrackProcess), pid)
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockManager)(nil).Close))
}

// TrackProcess mocks base method.
func (m *MockManager) TrackProcess(pid int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackProcess", pid)
}

// TrackProcess indicates an expected call of TrackProcess.
func (mr *MockManagerMockRecorder) TrackProcess(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackProcess", reflect.TypeOf((*MockManager)(nil).TrackProcess), pid)
}

// UntrackProcess mocks base method.
func (m *MockManager) UntrackProcess(pid int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UntrackProcess", pid)
}

// UntrackProcess indicates an expected call of UntrackProcess.
func (mr *MockManagerMockRecorder) UntrackProcess(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntrackProcess", reflect.TypeOf((*MockManager)(nil).UntrackProcess), pid)
}

// Usage mocks base method.
func (m *MockManager) Usage() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usage")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Usage indicates an expected call of Usage.
func (mr *MockManagerMockRecorder) Usage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usage", reflect.TypeOf((*MockManager)(nil).Usage))
}
