// Copyright (C) 2019-2022, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: network/gossip_tracker.go

// Package network is a generated GoMock package.
package network

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockGossipTracker is a mock of GossipTracker interface.
type MockGossipTracker struct {
	ctrl     *gomock.Controller
	recorder *MockGossipTrackerMockRecorder
}

// MockGossipTrackerMockRecorder is the mock recorder for MockGossipTracker.
type MockGossipTrackerMockRecorder struct {
	mock *MockGossipTracker
}

// NewMockGossipTracker creates a new mock instance.
func NewMockGossipTracker(ctrl *gomock.Controller) *MockGossipTracker {
	mock := &MockGossipTracker{ctrl: ctrl}
	mock.recorder = &MockGossipTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGossipTracker) EXPECT() *MockGossipTrackerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGossipTracker) Add(id ids.NodeID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockGossipTrackerMockRecorder) Add(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGossipTracker)(nil).Add), id)
}

// Contains mocks base method.
func (m *MockGossipTracker) Contains(id ids.NodeID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockGossipTrackerMockRecorder) Contains(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockGossipTracker)(nil).Contains), id)
}

// GetUnknown mocks base method.
func (m *MockGossipTracker) GetUnknown(id ids.NodeID, limit int) ([]ids.NodeID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnknown", id, limit)
	ret0, _ := ret[0].([]ids.NodeID)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUnknown indicates an expected call of GetUnknown.
func (mr *MockGossipTrackerMockRecorder) GetUnknown(id, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnknown", reflect.TypeOf((*MockGossipTracker)(nil).GetUnknown), id, limit)
}

// Remove mocks base method.
func (m *MockGossipTracker) Remove(id ids.NodeID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockGossipTrackerMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockGossipTracker)(nil).Remove), id)
}

// UpdateKnown mocks base method.
func (m *MockGossipTracker) UpdateKnown(id ids.NodeID, learned []ids.NodeID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnown", id, learned)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateKnown indicates an expected call of UpdateKnown.
func (mr *MockGossipTrackerMockRecorder) UpdateKnown(id, learned interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnown", reflect.TypeOf((*MockGossipTracker)(nil).UpdateKnown), id, learned)
}
