// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/state/pending_stakers.go

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "github.com/golang/mock/gomock"
)

// MockPendingStakers is a mock of PendingStakers interface.
type MockPendingStakers struct {
	ctrl     *gomock.Controller
	recorder *MockPendingStakersMockRecorder
}

// MockPendingStakersMockRecorder is the mock recorder for MockPendingStakers.
type MockPendingStakersMockRecorder struct {
	mock *MockPendingStakers
}

// NewMockPendingStakers creates a new mock instance.
func NewMockPendingStakers(ctrl *gomock.Controller) *MockPendingStakers {
	mock := &MockPendingStakers{ctrl: ctrl}
	mock.recorder = &MockPendingStakersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPendingStakers) EXPECT() *MockPendingStakersMockRecorder {
	return m.recorder
}

// AddStaker mocks base method.
func (m *MockPendingStakers) AddStaker(addStakerTx *txs.Tx) PendingStakers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStaker", addStakerTx)
	ret0, _ := ret[0].(PendingStakers)
	return ret0
}

// AddStaker indicates an expected call of AddStaker.
func (mr *MockPendingStakersMockRecorder) AddStaker(addStakerTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStaker", reflect.TypeOf((*MockPendingStakers)(nil).AddStaker), addStakerTx)
}

// Apply mocks base method.
func (m *MockPendingStakers) Apply(arg0 State) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", arg0)
}

// Apply indicates an expected call of Apply.
func (mr *MockPendingStakersMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockPendingStakers)(nil).Apply), arg0)
}

// DeleteStakers mocks base method.
func (m *MockPendingStakers) DeleteStakers(numToRemove int) PendingStakers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStakers", numToRemove)
	ret0, _ := ret[0].(PendingStakers)
	return ret0
}

// DeleteStakers indicates an expected call of DeleteStakers.
func (mr *MockPendingStakersMockRecorder) DeleteStakers(numToRemove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStakers", reflect.TypeOf((*MockPendingStakers)(nil).DeleteStakers), numToRemove)
}

// GetValidator mocks base method.
func (m *MockPendingStakers) GetValidator(nodeID ids.NodeID) ValidatorModifications {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", nodeID)
	ret0, _ := ret[0].(ValidatorModifications)
	return ret0
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockPendingStakersMockRecorder) GetValidator(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockPendingStakers)(nil).GetValidator), nodeID)
}

// GetValidatorTx mocks base method.
func (m *MockPendingStakers) GetValidatorTx(nodeID ids.NodeID) (*txs.AddValidatorTx, ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorTx", nodeID)
	ret0, _ := ret[0].(*txs.AddValidatorTx)
	ret1, _ := ret[1].(ids.ID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValidatorTx indicates an expected call of GetValidatorTx.
func (mr *MockPendingStakersMockRecorder) GetValidatorTx(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorTx", reflect.TypeOf((*MockPendingStakers)(nil).GetValidatorTx), nodeID)
}

// Stakers mocks base method.
func (m *MockPendingStakers) Stakers() []*txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stakers")
	ret0, _ := ret[0].([]*txs.Tx)
	return ret0
}

// Stakers indicates an expected call of Stakers.
func (mr *MockPendingStakersMockRecorder) Stakers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stakers", reflect.TypeOf((*MockPendingStakers)(nil).Stakers))
}
