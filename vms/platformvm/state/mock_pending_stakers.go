// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/state/AAAAA.go

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockPendingStakers is a mock of PendingStakers interface.
type MockPendingStakers struct {
	ctrl     *gomock.Controller
	recorder *MockPendingStakersMockRecorder
}

// MockPendingStakersMockRecorder is the mock recorder for MockPendingStakers.
type MockPendingStakersMockRecorder struct {
	mock *MockPendingStakers
}

// NewMockPendingStakers creates a new mock instance.
func NewMockPendingStakers(ctrl *gomock.Controller) *MockPendingStakers {
	mock := &MockPendingStakers{ctrl: ctrl}
	mock.recorder = &MockPendingStakersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPendingStakers) EXPECT() *MockPendingStakersMockRecorder {
	return m.recorder
}

// DeletePendingDelegator mocks base method.
func (m *MockPendingStakers) DeletePendingDelegator(staker *Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePendingDelegator", staker)
}

// DeletePendingDelegator indicates an expected call of DeletePendingDelegator.
func (mr *MockPendingStakersMockRecorder) DeletePendingDelegator(staker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingDelegator", reflect.TypeOf((*MockPendingStakers)(nil).DeletePendingDelegator), staker)
}

// DeletePendingValidator mocks base method.
func (m *MockPendingStakers) DeletePendingValidator(staker *Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePendingValidator", staker)
}

// DeletePendingValidator indicates an expected call of DeletePendingValidator.
func (mr *MockPendingStakersMockRecorder) DeletePendingValidator(staker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingValidator", reflect.TypeOf((*MockPendingStakers)(nil).DeletePendingValidator), staker)
}

// GetPendingDelegatorIterator mocks base method.
func (m *MockPendingStakers) GetPendingDelegatorIterator(subnetID ids.ID, nodeID ids.NodeID) (StakerIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingDelegatorIterator", subnetID, nodeID)
	ret0, _ := ret[0].(StakerIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingDelegatorIterator indicates an expected call of GetPendingDelegatorIterator.
func (mr *MockPendingStakersMockRecorder) GetPendingDelegatorIterator(subnetID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingDelegatorIterator", reflect.TypeOf((*MockPendingStakers)(nil).GetPendingDelegatorIterator), subnetID, nodeID)
}

// GetPendingStakerIterator mocks base method.
func (m *MockPendingStakers) GetPendingStakerIterator() (StakerIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingStakerIterator")
	ret0, _ := ret[0].(StakerIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingStakerIterator indicates an expected call of GetPendingStakerIterator.
func (mr *MockPendingStakersMockRecorder) GetPendingStakerIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingStakerIterator", reflect.TypeOf((*MockPendingStakers)(nil).GetPendingStakerIterator))
}

// GetPendingValidator mocks base method.
func (m *MockPendingStakers) GetPendingValidator(subnetID ids.ID, nodeID ids.NodeID) (*Staker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingValidator", subnetID, nodeID)
	ret0, _ := ret[0].(*Staker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingValidator indicates an expected call of GetPendingValidator.
func (mr *MockPendingStakersMockRecorder) GetPendingValidator(subnetID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingValidator", reflect.TypeOf((*MockPendingStakers)(nil).GetPendingValidator), subnetID, nodeID)
}

// PutPendingDelegator mocks base method.
func (m *MockPendingStakers) PutPendingDelegator(staker *Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutPendingDelegator", staker)
}

// PutPendingDelegator indicates an expected call of PutPendingDelegator.
func (mr *MockPendingStakersMockRecorder) PutPendingDelegator(staker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPendingDelegator", reflect.TypeOf((*MockPendingStakers)(nil).PutPendingDelegator), staker)
}

// PutPendingValidator mocks base method.
func (m *MockPendingStakers) PutPendingValidator(staker *Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutPendingValidator", staker)
}

// PutPendingValidator indicates an expected call of PutPendingValidator.
func (mr *MockPendingStakersMockRecorder) PutPendingValidator(staker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPendingValidator", reflect.TypeOf((*MockPendingStakers)(nil).PutPendingValidator), staker)
}