// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/state/blocks/state.go

// Package blocks is a generated GoMock package.
package blocks

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	choices "github.com/ava-labs/avalanchego/snow/choices"
	stateless "github.com/ava-labs/avalanchego/vms/platformvm/blocks/stateless"
	gomock "github.com/golang/mock/gomock"
)

// MockBlkState is a mock of BlkState interface.
type MockBlkState struct {
	ctrl     *gomock.Controller
	recorder *MockBlkStateMockRecorder
}

// MockBlkStateMockRecorder is the mock recorder for MockBlkState.
type MockBlkStateMockRecorder struct {
	mock *MockBlkState
}

// NewMockBlkState creates a new mock instance.
func NewMockBlkState(ctrl *gomock.Controller) *MockBlkState {
	mock := &MockBlkState{ctrl: ctrl}
	mock.recorder = &MockBlkStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlkState) EXPECT() *MockBlkStateMockRecorder {
	return m.recorder
}

// AddStatelessBlock mocks base method.
func (m *MockBlkState) AddStatelessBlock(block stateless.Block, status choices.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStatelessBlock", block, status)
}

// AddStatelessBlock indicates an expected call of AddStatelessBlock.
func (mr *MockBlkStateMockRecorder) AddStatelessBlock(block, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStatelessBlock", reflect.TypeOf((*MockBlkState)(nil).AddStatelessBlock), block, status)
}

// CloseBlocks mocks base method.
func (m *MockBlkState) CloseBlocks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBlocks")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseBlocks indicates an expected call of CloseBlocks.
func (mr *MockBlkStateMockRecorder) CloseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBlocks", reflect.TypeOf((*MockBlkState)(nil).CloseBlocks))
}

// GetStatelessBlock mocks base method.
func (m *MockBlkState) GetStatelessBlock(blockID ids.ID) (stateless.Block, choices.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatelessBlock", blockID)
	ret0, _ := ret[0].(stateless.Block)
	ret1, _ := ret[1].(choices.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatelessBlock indicates an expected call of GetStatelessBlock.
func (mr *MockBlkStateMockRecorder) GetStatelessBlock(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatelessBlock", reflect.TypeOf((*MockBlkState)(nil).GetStatelessBlock), blockID)
}

// SyncGenesis mocks base method.
func (m *MockBlkState) SyncGenesis(genesisBytes []byte) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncGenesis", genesisBytes)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncGenesis indicates an expected call of SyncGenesis.
func (mr *MockBlkStateMockRecorder) SyncGenesis(genesisBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncGenesis", reflect.TypeOf((*MockBlkState)(nil).SyncGenesis), genesisBytes)
}

// WriteBlocks mocks base method.
func (m *MockBlkState) WriteBlocks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBlocks")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBlocks indicates an expected call of WriteBlocks.
func (mr *MockBlkStateMockRecorder) WriteBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBlocks", reflect.TypeOf((*MockBlkState)(nil).WriteBlocks))
}

// MockContent is a mock of Content interface.
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *MockContentMockRecorder
}

// MockContentMockRecorder is the mock recorder for MockContent.
type MockContentMockRecorder struct {
	mock *MockContent
}

// NewMockContent creates a new mock instance.
func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &MockContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContent) EXPECT() *MockContentMockRecorder {
	return m.recorder
}

// AddStatelessBlock mocks base method.
func (m *MockContent) AddStatelessBlock(block stateless.Block, status choices.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStatelessBlock", block, status)
}

// AddStatelessBlock indicates an expected call of AddStatelessBlock.
func (mr *MockContentMockRecorder) AddStatelessBlock(block, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStatelessBlock", reflect.TypeOf((*MockContent)(nil).AddStatelessBlock), block, status)
}

// GetStatelessBlock mocks base method.
func (m *MockContent) GetStatelessBlock(blockID ids.ID) (stateless.Block, choices.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatelessBlock", blockID)
	ret0, _ := ret[0].(stateless.Block)
	ret1, _ := ret[1].(choices.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatelessBlock indicates an expected call of GetStatelessBlock.
func (mr *MockContentMockRecorder) GetStatelessBlock(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatelessBlock", reflect.TypeOf((*MockContent)(nil).GetStatelessBlock), blockID)
}

// MockManagement is a mock of Management interface.
type MockManagement struct {
	ctrl     *gomock.Controller
	recorder *MockManagementMockRecorder
}

// MockManagementMockRecorder is the mock recorder for MockManagement.
type MockManagementMockRecorder struct {
	mock *MockManagement
}

// NewMockManagement creates a new mock instance.
func NewMockManagement(ctrl *gomock.Controller) *MockManagement {
	mock := &MockManagement{ctrl: ctrl}
	mock.recorder = &MockManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement) EXPECT() *MockManagementMockRecorder {
	return m.recorder
}

// CloseBlocks mocks base method.
func (m *MockManagement) CloseBlocks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBlocks")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseBlocks indicates an expected call of CloseBlocks.
func (mr *MockManagementMockRecorder) CloseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBlocks", reflect.TypeOf((*MockManagement)(nil).CloseBlocks))
}

// SyncGenesis mocks base method.
func (m *MockManagement) SyncGenesis(genesisBytes []byte) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncGenesis", genesisBytes)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncGenesis indicates an expected call of SyncGenesis.
func (mr *MockManagementMockRecorder) SyncGenesis(genesisBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncGenesis", reflect.TypeOf((*MockManagement)(nil).SyncGenesis), genesisBytes)
}

// WriteBlocks mocks base method.
func (m *MockManagement) WriteBlocks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBlocks")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBlocks indicates an expected call of WriteBlocks.
func (mr *MockManagementMockRecorder) WriteBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBlocks", reflect.TypeOf((*MockManagement)(nil).WriteBlocks))
}
