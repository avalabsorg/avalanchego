// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/state/state.go

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"
	time "time"

	database "github.com/ava-labs/avalanchego/database"
	ids "github.com/ava-labs/avalanchego/ids"
	choices "github.com/ava-labs/avalanchego/snow/choices"
	avax "github.com/ava-labs/avalanchego/vms/components/avax"
	stateless "github.com/ava-labs/avalanchego/vms/platformvm/blocks/stateless"
	transactions "github.com/ava-labs/avalanchego/vms/platformvm/state/transactions"
	status "github.com/ava-labs/avalanchego/vms/platformvm/status"
	signed "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "github.com/golang/mock/gomock"
)

// MockMutable is a mock of Mutable interface.
type MockMutable struct {
	ctrl     *gomock.Controller
	recorder *MockMutableMockRecorder
}

// MockMutableMockRecorder is the mock recorder for MockMutable.
type MockMutableMockRecorder struct {
	mock *MockMutable
}

// NewMockMutable creates a new mock instance.
func NewMockMutable(ctrl *gomock.Controller) *MockMutable {
	mock := &MockMutable{ctrl: ctrl}
	mock.recorder = &MockMutableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutable) EXPECT() *MockMutableMockRecorder {
	return m.recorder
}

// AddChain mocks base method.
func (m *MockMutable) AddChain(createChainTx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddChain", createChainTx)
}

// AddChain indicates an expected call of AddChain.
func (mr *MockMutableMockRecorder) AddChain(createChainTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChain", reflect.TypeOf((*MockMutable)(nil).AddChain), createChainTx)
}

// AddRewardUTXO mocks base method.
func (m *MockMutable) AddRewardUTXO(txID ids.ID, utxo *avax.UTXO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRewardUTXO", txID, utxo)
}

// AddRewardUTXO indicates an expected call of AddRewardUTXO.
func (mr *MockMutableMockRecorder) AddRewardUTXO(txID, utxo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRewardUTXO", reflect.TypeOf((*MockMutable)(nil).AddRewardUTXO), txID, utxo)
}

// AddSubnet mocks base method.
func (m *MockMutable) AddSubnet(createSubnetTx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubnet", createSubnetTx)
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockMutableMockRecorder) AddSubnet(createSubnetTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockMutable)(nil).AddSubnet), createSubnetTx)
}

// AddTx mocks base method.
func (m *MockMutable) AddTx(tx *signed.Tx, status status.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTx", tx, status)
}

// AddTx indicates an expected call of AddTx.
func (mr *MockMutableMockRecorder) AddTx(tx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTx", reflect.TypeOf((*MockMutable)(nil).AddTx), tx, status)
}

// AddUTXO mocks base method.
func (m *MockMutable) AddUTXO(utxo *avax.UTXO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUTXO", utxo)
}

// AddUTXO indicates an expected call of AddUTXO.
func (mr *MockMutableMockRecorder) AddUTXO(utxo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUTXO", reflect.TypeOf((*MockMutable)(nil).AddUTXO), utxo)
}

// CurrentStakerChainState mocks base method.
func (m *MockMutable) CurrentStakerChainState() transactions.CurrentStakerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentStakerChainState")
	ret0, _ := ret[0].(transactions.CurrentStakerState)
	return ret0
}

// CurrentStakerChainState indicates an expected call of CurrentStakerChainState.
func (mr *MockMutableMockRecorder) CurrentStakerChainState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentStakerChainState", reflect.TypeOf((*MockMutable)(nil).CurrentStakerChainState))
}

// DeleteUTXO mocks base method.
func (m *MockMutable) DeleteUTXO(utxoID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUTXO", utxoID)
}

// DeleteUTXO indicates an expected call of DeleteUTXO.
func (mr *MockMutableMockRecorder) DeleteUTXO(utxoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUTXO", reflect.TypeOf((*MockMutable)(nil).DeleteUTXO), utxoID)
}

// GetChains mocks base method.
func (m *MockMutable) GetChains(subnetID ids.ID) ([]*signed.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", subnetID)
	ret0, _ := ret[0].([]*signed.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains.
func (mr *MockMutableMockRecorder) GetChains(subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockMutable)(nil).GetChains), subnetID)
}

// GetCurrentSupply mocks base method.
func (m *MockMutable) GetCurrentSupply() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSupply")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCurrentSupply indicates an expected call of GetCurrentSupply.
func (mr *MockMutableMockRecorder) GetCurrentSupply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSupply", reflect.TypeOf((*MockMutable)(nil).GetCurrentSupply))
}

// GetNextStakerChangeTime mocks base method.
func (m *MockMutable) GetNextStakerChangeTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextStakerChangeTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextStakerChangeTime indicates an expected call of GetNextStakerChangeTime.
func (mr *MockMutableMockRecorder) GetNextStakerChangeTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextStakerChangeTime", reflect.TypeOf((*MockMutable)(nil).GetNextStakerChangeTime))
}

// GetRewardUTXOs mocks base method.
func (m *MockMutable) GetRewardUTXOs(txID ids.ID) ([]*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardUTXOs", txID)
	ret0, _ := ret[0].([]*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardUTXOs indicates an expected call of GetRewardUTXOs.
func (mr *MockMutableMockRecorder) GetRewardUTXOs(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardUTXOs", reflect.TypeOf((*MockMutable)(nil).GetRewardUTXOs), txID)
}

// GetSubnets mocks base method.
func (m *MockMutable) GetSubnets() ([]*signed.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnets")
	ret0, _ := ret[0].([]*signed.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnets indicates an expected call of GetSubnets.
func (mr *MockMutableMockRecorder) GetSubnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnets", reflect.TypeOf((*MockMutable)(nil).GetSubnets))
}

// GetTimestamp mocks base method.
func (m *MockMutable) GetTimestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockMutableMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockMutable)(nil).GetTimestamp))
}

// GetTx mocks base method.
func (m *MockMutable) GetTx(txID ids.ID) (*signed.Tx, status.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", txID)
	ret0, _ := ret[0].(*signed.Tx)
	ret1, _ := ret[1].(status.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTx indicates an expected call of GetTx.
func (mr *MockMutableMockRecorder) GetTx(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockMutable)(nil).GetTx), txID)
}

// GetUTXO mocks base method.
func (m *MockMutable) GetUTXO(utxoID ids.ID) (*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUTXO", utxoID)
	ret0, _ := ret[0].(*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUTXO indicates an expected call of GetUTXO.
func (mr *MockMutableMockRecorder) GetUTXO(utxoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUTXO", reflect.TypeOf((*MockMutable)(nil).GetUTXO), utxoID)
}

// PendingStakerChainState mocks base method.
func (m *MockMutable) PendingStakerChainState() transactions.PendingStakerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStakerChainState")
	ret0, _ := ret[0].(transactions.PendingStakerState)
	return ret0
}

// PendingStakerChainState indicates an expected call of PendingStakerChainState.
func (mr *MockMutableMockRecorder) PendingStakerChainState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStakerChainState", reflect.TypeOf((*MockMutable)(nil).PendingStakerChainState))
}

// SetCurrentStakerChainState mocks base method.
func (m *MockMutable) SetCurrentStakerChainState(cs transactions.CurrentStakerState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentStakerChainState", cs)
}

// SetCurrentStakerChainState indicates an expected call of SetCurrentStakerChainState.
func (mr *MockMutableMockRecorder) SetCurrentStakerChainState(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentStakerChainState", reflect.TypeOf((*MockMutable)(nil).SetCurrentStakerChainState), cs)
}

// SetCurrentSupply mocks base method.
func (m *MockMutable) SetCurrentSupply(cs uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentSupply", cs)
}

// SetCurrentSupply indicates an expected call of SetCurrentSupply.
func (mr *MockMutableMockRecorder) SetCurrentSupply(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentSupply", reflect.TypeOf((*MockMutable)(nil).SetCurrentSupply), cs)
}

// SetPendingStakerChainState mocks base method.
func (m *MockMutable) SetPendingStakerChainState(ps transactions.PendingStakerState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPendingStakerChainState", ps)
}

// SetPendingStakerChainState indicates an expected call of SetPendingStakerChainState.
func (mr *MockMutableMockRecorder) SetPendingStakerChainState(ps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingStakerChainState", reflect.TypeOf((*MockMutable)(nil).SetPendingStakerChainState), ps)
}

// SetTimestamp mocks base method.
func (m *MockMutable) SetTimestamp(tm time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimestamp", tm)
}

// SetTimestamp indicates an expected call of SetTimestamp.
func (mr *MockMutableMockRecorder) SetTimestamp(tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamp", reflect.TypeOf((*MockMutable)(nil).SetTimestamp), tm)
}

// MockContent is a mock of Content interface.
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *MockContentMockRecorder
}

// MockContentMockRecorder is the mock recorder for MockContent.
type MockContentMockRecorder struct {
	mock *MockContent
}

// NewMockContent creates a new mock instance.
func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &MockContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContent) EXPECT() *MockContentMockRecorder {
	return m.recorder
}

// AddChain mocks base method.
func (m *MockContent) AddChain(createChainTx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddChain", createChainTx)
}

// AddChain indicates an expected call of AddChain.
func (mr *MockContentMockRecorder) AddChain(createChainTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChain", reflect.TypeOf((*MockContent)(nil).AddChain), createChainTx)
}

// AddCurrentStaker mocks base method.
func (m *MockContent) AddCurrentStaker(tx *signed.Tx, potentialReward uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCurrentStaker", tx, potentialReward)
}

// AddCurrentStaker indicates an expected call of AddCurrentStaker.
func (mr *MockContentMockRecorder) AddCurrentStaker(tx, potentialReward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrentStaker", reflect.TypeOf((*MockContent)(nil).AddCurrentStaker), tx, potentialReward)
}

// AddPendingStaker mocks base method.
func (m *MockContent) AddPendingStaker(tx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPendingStaker", tx)
}

// AddPendingStaker indicates an expected call of AddPendingStaker.
func (mr *MockContentMockRecorder) AddPendingStaker(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPendingStaker", reflect.TypeOf((*MockContent)(nil).AddPendingStaker), tx)
}

// AddRewardUTXO mocks base method.
func (m *MockContent) AddRewardUTXO(txID ids.ID, utxo *avax.UTXO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRewardUTXO", txID, utxo)
}

// AddRewardUTXO indicates an expected call of AddRewardUTXO.
func (mr *MockContentMockRecorder) AddRewardUTXO(txID, utxo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRewardUTXO", reflect.TypeOf((*MockContent)(nil).AddRewardUTXO), txID, utxo)
}

// AddStatelessBlock mocks base method.
func (m *MockContent) AddStatelessBlock(block stateless.Block, status choices.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStatelessBlock", block, status)
}

// AddStatelessBlock indicates an expected call of AddStatelessBlock.
func (mr *MockContentMockRecorder) AddStatelessBlock(block, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStatelessBlock", reflect.TypeOf((*MockContent)(nil).AddStatelessBlock), block, status)
}

// AddSubnet mocks base method.
func (m *MockContent) AddSubnet(createSubnetTx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubnet", createSubnetTx)
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockContentMockRecorder) AddSubnet(createSubnetTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockContent)(nil).AddSubnet), createSubnetTx)
}

// AddTx mocks base method.
func (m *MockContent) AddTx(tx *signed.Tx, status status.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTx", tx, status)
}

// AddTx indicates an expected call of AddTx.
func (mr *MockContentMockRecorder) AddTx(tx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTx", reflect.TypeOf((*MockContent)(nil).AddTx), tx, status)
}

// AddUTXO mocks base method.
func (m *MockContent) AddUTXO(utxo *avax.UTXO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUTXO", utxo)
}

// AddUTXO indicates an expected call of AddUTXO.
func (mr *MockContentMockRecorder) AddUTXO(utxo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUTXO", reflect.TypeOf((*MockContent)(nil).AddUTXO), utxo)
}

// CurrentStakerChainState mocks base method.
func (m *MockContent) CurrentStakerChainState() transactions.CurrentStakerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentStakerChainState")
	ret0, _ := ret[0].(transactions.CurrentStakerState)
	return ret0
}

// CurrentStakerChainState indicates an expected call of CurrentStakerChainState.
func (mr *MockContentMockRecorder) CurrentStakerChainState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentStakerChainState", reflect.TypeOf((*MockContent)(nil).CurrentStakerChainState))
}

// DeleteCurrentStaker mocks base method.
func (m *MockContent) DeleteCurrentStaker(tx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCurrentStaker", tx)
}

// DeleteCurrentStaker indicates an expected call of DeleteCurrentStaker.
func (mr *MockContentMockRecorder) DeleteCurrentStaker(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrentStaker", reflect.TypeOf((*MockContent)(nil).DeleteCurrentStaker), tx)
}

// DeletePendingStaker mocks base method.
func (m *MockContent) DeletePendingStaker(tx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePendingStaker", tx)
}

// DeletePendingStaker indicates an expected call of DeletePendingStaker.
func (mr *MockContentMockRecorder) DeletePendingStaker(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingStaker", reflect.TypeOf((*MockContent)(nil).DeletePendingStaker), tx)
}

// DeleteUTXO mocks base method.
func (m *MockContent) DeleteUTXO(utxoID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUTXO", utxoID)
}

// DeleteUTXO indicates an expected call of DeleteUTXO.
func (mr *MockContentMockRecorder) DeleteUTXO(utxoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUTXO", reflect.TypeOf((*MockContent)(nil).DeleteUTXO), utxoID)
}

// DoneInit mocks base method.
func (m *MockContent) DoneInit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoneInit")
	ret0, _ := ret[0].(error)
	return ret0
}

// DoneInit indicates an expected call of DoneInit.
func (mr *MockContentMockRecorder) DoneInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoneInit", reflect.TypeOf((*MockContent)(nil).DoneInit))
}

// GetChains mocks base method.
func (m *MockContent) GetChains(subnetID ids.ID) ([]*signed.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", subnetID)
	ret0, _ := ret[0].([]*signed.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains.
func (mr *MockContentMockRecorder) GetChains(subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockContent)(nil).GetChains), subnetID)
}

// GetCurrentSupply mocks base method.
func (m *MockContent) GetCurrentSupply() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSupply")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCurrentSupply indicates an expected call of GetCurrentSupply.
func (mr *MockContentMockRecorder) GetCurrentSupply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSupply", reflect.TypeOf((*MockContent)(nil).GetCurrentSupply))
}

// GetHeight mocks base method.
func (m *MockContent) GetHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockContentMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockContent)(nil).GetHeight))
}

// GetLastAccepted mocks base method.
func (m *MockContent) GetLastAccepted() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAccepted")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// GetLastAccepted indicates an expected call of GetLastAccepted.
func (mr *MockContentMockRecorder) GetLastAccepted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAccepted", reflect.TypeOf((*MockContent)(nil).GetLastAccepted))
}

// GetNextStakerChangeTime mocks base method.
func (m *MockContent) GetNextStakerChangeTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextStakerChangeTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextStakerChangeTime indicates an expected call of GetNextStakerChangeTime.
func (mr *MockContentMockRecorder) GetNextStakerChangeTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextStakerChangeTime", reflect.TypeOf((*MockContent)(nil).GetNextStakerChangeTime))
}

// GetRewardUTXOs mocks base method.
func (m *MockContent) GetRewardUTXOs(txID ids.ID) ([]*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardUTXOs", txID)
	ret0, _ := ret[0].([]*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardUTXOs indicates an expected call of GetRewardUTXOs.
func (mr *MockContentMockRecorder) GetRewardUTXOs(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardUTXOs", reflect.TypeOf((*MockContent)(nil).GetRewardUTXOs), txID)
}

// GetStartTime mocks base method.
func (m *MockContent) GetStartTime(nodeID ids.NodeID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartTime", nodeID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartTime indicates an expected call of GetStartTime.
func (mr *MockContentMockRecorder) GetStartTime(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartTime", reflect.TypeOf((*MockContent)(nil).GetStartTime), nodeID)
}

// GetStatelessBlock mocks base method.
func (m *MockContent) GetStatelessBlock(blockID ids.ID) (stateless.Block, choices.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatelessBlock", blockID)
	ret0, _ := ret[0].(stateless.Block)
	ret1, _ := ret[1].(choices.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatelessBlock indicates an expected call of GetStatelessBlock.
func (mr *MockContentMockRecorder) GetStatelessBlock(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatelessBlock", reflect.TypeOf((*MockContent)(nil).GetStatelessBlock), blockID)
}

// GetSubnets mocks base method.
func (m *MockContent) GetSubnets() ([]*signed.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnets")
	ret0, _ := ret[0].([]*signed.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnets indicates an expected call of GetSubnets.
func (mr *MockContentMockRecorder) GetSubnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnets", reflect.TypeOf((*MockContent)(nil).GetSubnets))
}

// GetTimestamp mocks base method.
func (m *MockContent) GetTimestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockContentMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockContent)(nil).GetTimestamp))
}

// GetTx mocks base method.
func (m *MockContent) GetTx(txID ids.ID) (*signed.Tx, status.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", txID)
	ret0, _ := ret[0].(*signed.Tx)
	ret1, _ := ret[1].(status.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTx indicates an expected call of GetTx.
func (mr *MockContentMockRecorder) GetTx(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockContent)(nil).GetTx), txID)
}

// GetUTXO mocks base method.
func (m *MockContent) GetUTXO(utxoID ids.ID) (*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUTXO", utxoID)
	ret0, _ := ret[0].(*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUTXO indicates an expected call of GetUTXO.
func (mr *MockContentMockRecorder) GetUTXO(utxoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUTXO", reflect.TypeOf((*MockContent)(nil).GetUTXO), utxoID)
}

// GetUptime mocks base method.
func (m *MockContent) GetUptime(nodeID ids.NodeID) (time.Duration, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUptime", nodeID)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUptime indicates an expected call of GetUptime.
func (mr *MockContentMockRecorder) GetUptime(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUptime", reflect.TypeOf((*MockContent)(nil).GetUptime), nodeID)
}

// GetValidatorWeightDiffs mocks base method.
func (m *MockContent) GetValidatorWeightDiffs(height uint64, subnetID ids.ID) (map[ids.NodeID]*transactions.ValidatorWeightDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorWeightDiffs", height, subnetID)
	ret0, _ := ret[0].(map[ids.NodeID]*transactions.ValidatorWeightDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorWeightDiffs indicates an expected call of GetValidatorWeightDiffs.
func (mr *MockContentMockRecorder) GetValidatorWeightDiffs(height, subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorWeightDiffs", reflect.TypeOf((*MockContent)(nil).GetValidatorWeightDiffs), height, subnetID)
}

// MaxStakeAmount mocks base method.
func (m *MockContent) MaxStakeAmount(subnetID ids.ID, nodeID ids.NodeID, startTime, endTime time.Time) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxStakeAmount", subnetID, nodeID, startTime, endTime)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxStakeAmount indicates an expected call of MaxStakeAmount.
func (mr *MockContentMockRecorder) MaxStakeAmount(subnetID, nodeID, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxStakeAmount", reflect.TypeOf((*MockContent)(nil).MaxStakeAmount), subnetID, nodeID, startTime, endTime)
}

// PendingStakerChainState mocks base method.
func (m *MockContent) PendingStakerChainState() transactions.PendingStakerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStakerChainState")
	ret0, _ := ret[0].(transactions.PendingStakerState)
	return ret0
}

// PendingStakerChainState indicates an expected call of PendingStakerChainState.
func (mr *MockContentMockRecorder) PendingStakerChainState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStakerChainState", reflect.TypeOf((*MockContent)(nil).PendingStakerChainState))
}

// SetCurrentStakerChainState mocks base method.
func (m *MockContent) SetCurrentStakerChainState(cs transactions.CurrentStakerState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentStakerChainState", cs)
}

// SetCurrentStakerChainState indicates an expected call of SetCurrentStakerChainState.
func (mr *MockContentMockRecorder) SetCurrentStakerChainState(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentStakerChainState", reflect.TypeOf((*MockContent)(nil).SetCurrentStakerChainState), cs)
}

// SetCurrentSupply mocks base method.
func (m *MockContent) SetCurrentSupply(cs uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentSupply", cs)
}

// SetCurrentSupply indicates an expected call of SetCurrentSupply.
func (mr *MockContentMockRecorder) SetCurrentSupply(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentSupply", reflect.TypeOf((*MockContent)(nil).SetCurrentSupply), cs)
}

// SetHeight mocks base method.
func (m *MockContent) SetHeight(height uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeight", height)
}

// SetHeight indicates an expected call of SetHeight.
func (mr *MockContentMockRecorder) SetHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeight", reflect.TypeOf((*MockContent)(nil).SetHeight), height)
}

// SetLastAccepted mocks base method.
func (m *MockContent) SetLastAccepted(arg0 ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastAccepted", arg0)
}

// SetLastAccepted indicates an expected call of SetLastAccepted.
func (mr *MockContentMockRecorder) SetLastAccepted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastAccepted", reflect.TypeOf((*MockContent)(nil).SetLastAccepted), arg0)
}

// SetPendingStakerChainState mocks base method.
func (m *MockContent) SetPendingStakerChainState(ps transactions.PendingStakerState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPendingStakerChainState", ps)
}

// SetPendingStakerChainState indicates an expected call of SetPendingStakerChainState.
func (mr *MockContentMockRecorder) SetPendingStakerChainState(ps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingStakerChainState", reflect.TypeOf((*MockContent)(nil).SetPendingStakerChainState), ps)
}

// SetTimestamp mocks base method.
func (m *MockContent) SetTimestamp(tm time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimestamp", tm)
}

// SetTimestamp indicates an expected call of SetTimestamp.
func (mr *MockContentMockRecorder) SetTimestamp(tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamp", reflect.TypeOf((*MockContent)(nil).SetTimestamp), tm)
}

// SetUptime mocks base method.
func (m *MockContent) SetUptime(nodeID ids.NodeID, upDuration time.Duration, lastUpdated time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUptime", nodeID, upDuration, lastUpdated)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUptime indicates an expected call of SetUptime.
func (mr *MockContentMockRecorder) SetUptime(nodeID, upDuration, lastUpdated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUptime", reflect.TypeOf((*MockContent)(nil).SetUptime), nodeID, upDuration, lastUpdated)
}

// ShouldInit mocks base method.
func (m *MockContent) ShouldInit() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldInit")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldInit indicates an expected call of ShouldInit.
func (mr *MockContentMockRecorder) ShouldInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldInit", reflect.TypeOf((*MockContent)(nil).ShouldInit))
}

// UTXOIDs mocks base method.
func (m *MockContent) UTXOIDs(addr []byte, previous ids.ID, limit int) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UTXOIDs", addr, previous, limit)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UTXOIDs indicates an expected call of UTXOIDs.
func (mr *MockContentMockRecorder) UTXOIDs(addr, previous, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UTXOIDs", reflect.TypeOf((*MockContent)(nil).UTXOIDs), addr, previous, limit)
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockState) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *MockStateMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockState)(nil).Abort))
}

// AddChain mocks base method.
func (m *MockState) AddChain(createChainTx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddChain", createChainTx)
}

// AddChain indicates an expected call of AddChain.
func (mr *MockStateMockRecorder) AddChain(createChainTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChain", reflect.TypeOf((*MockState)(nil).AddChain), createChainTx)
}

// AddCurrentStaker mocks base method.
func (m *MockState) AddCurrentStaker(tx *signed.Tx, potentialReward uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCurrentStaker", tx, potentialReward)
}

// AddCurrentStaker indicates an expected call of AddCurrentStaker.
func (mr *MockStateMockRecorder) AddCurrentStaker(tx, potentialReward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrentStaker", reflect.TypeOf((*MockState)(nil).AddCurrentStaker), tx, potentialReward)
}

// AddPendingStaker mocks base method.
func (m *MockState) AddPendingStaker(tx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPendingStaker", tx)
}

// AddPendingStaker indicates an expected call of AddPendingStaker.
func (mr *MockStateMockRecorder) AddPendingStaker(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPendingStaker", reflect.TypeOf((*MockState)(nil).AddPendingStaker), tx)
}

// AddRewardUTXO mocks base method.
func (m *MockState) AddRewardUTXO(txID ids.ID, utxo *avax.UTXO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRewardUTXO", txID, utxo)
}

// AddRewardUTXO indicates an expected call of AddRewardUTXO.
func (mr *MockStateMockRecorder) AddRewardUTXO(txID, utxo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRewardUTXO", reflect.TypeOf((*MockState)(nil).AddRewardUTXO), txID, utxo)
}

// AddStatelessBlock mocks base method.
func (m *MockState) AddStatelessBlock(block stateless.Block, status choices.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStatelessBlock", block, status)
}

// AddStatelessBlock indicates an expected call of AddStatelessBlock.
func (mr *MockStateMockRecorder) AddStatelessBlock(block, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStatelessBlock", reflect.TypeOf((*MockState)(nil).AddStatelessBlock), block, status)
}

// AddSubnet mocks base method.
func (m *MockState) AddSubnet(createSubnetTx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubnet", createSubnetTx)
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockStateMockRecorder) AddSubnet(createSubnetTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockState)(nil).AddSubnet), createSubnetTx)
}

// AddTx mocks base method.
func (m *MockState) AddTx(tx *signed.Tx, status status.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTx", tx, status)
}

// AddTx indicates an expected call of AddTx.
func (mr *MockStateMockRecorder) AddTx(tx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTx", reflect.TypeOf((*MockState)(nil).AddTx), tx, status)
}

// AddUTXO mocks base method.
func (m *MockState) AddUTXO(utxo *avax.UTXO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUTXO", utxo)
}

// AddUTXO indicates an expected call of AddUTXO.
func (mr *MockStateMockRecorder) AddUTXO(utxo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUTXO", reflect.TypeOf((*MockState)(nil).AddUTXO), utxo)
}

// Close mocks base method.
func (m *MockState) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStateMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockState)(nil).Close))
}

// Commit mocks base method.
func (m *MockState) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStateMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockState)(nil).Commit))
}

// CommitBatch mocks base method.
func (m *MockState) CommitBatch() (database.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBatch")
	ret0, _ := ret[0].(database.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitBatch indicates an expected call of CommitBatch.
func (mr *MockStateMockRecorder) CommitBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBatch", reflect.TypeOf((*MockState)(nil).CommitBatch))
}

// CurrentStakerChainState mocks base method.
func (m *MockState) CurrentStakerChainState() transactions.CurrentStakerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentStakerChainState")
	ret0, _ := ret[0].(transactions.CurrentStakerState)
	return ret0
}

// CurrentStakerChainState indicates an expected call of CurrentStakerChainState.
func (mr *MockStateMockRecorder) CurrentStakerChainState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentStakerChainState", reflect.TypeOf((*MockState)(nil).CurrentStakerChainState))
}

// DeleteCurrentStaker mocks base method.
func (m *MockState) DeleteCurrentStaker(tx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCurrentStaker", tx)
}

// DeleteCurrentStaker indicates an expected call of DeleteCurrentStaker.
func (mr *MockStateMockRecorder) DeleteCurrentStaker(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrentStaker", reflect.TypeOf((*MockState)(nil).DeleteCurrentStaker), tx)
}

// DeletePendingStaker mocks base method.
func (m *MockState) DeletePendingStaker(tx *signed.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePendingStaker", tx)
}

// DeletePendingStaker indicates an expected call of DeletePendingStaker.
func (mr *MockStateMockRecorder) DeletePendingStaker(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingStaker", reflect.TypeOf((*MockState)(nil).DeletePendingStaker), tx)
}

// DeleteUTXO mocks base method.
func (m *MockState) DeleteUTXO(utxoID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUTXO", utxoID)
}

// DeleteUTXO indicates an expected call of DeleteUTXO.
func (mr *MockStateMockRecorder) DeleteUTXO(utxoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUTXO", reflect.TypeOf((*MockState)(nil).DeleteUTXO), utxoID)
}

// DoneInit mocks base method.
func (m *MockState) DoneInit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoneInit")
	ret0, _ := ret[0].(error)
	return ret0
}

// DoneInit indicates an expected call of DoneInit.
func (mr *MockStateMockRecorder) DoneInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoneInit", reflect.TypeOf((*MockState)(nil).DoneInit))
}

// GetChains mocks base method.
func (m *MockState) GetChains(subnetID ids.ID) ([]*signed.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", subnetID)
	ret0, _ := ret[0].([]*signed.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains.
func (mr *MockStateMockRecorder) GetChains(subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockState)(nil).GetChains), subnetID)
}

// GetCurrentSupply mocks base method.
func (m *MockState) GetCurrentSupply() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSupply")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCurrentSupply indicates an expected call of GetCurrentSupply.
func (mr *MockStateMockRecorder) GetCurrentSupply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSupply", reflect.TypeOf((*MockState)(nil).GetCurrentSupply))
}

// GetHeight mocks base method.
func (m *MockState) GetHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockStateMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockState)(nil).GetHeight))
}

// GetLastAccepted mocks base method.
func (m *MockState) GetLastAccepted() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAccepted")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// GetLastAccepted indicates an expected call of GetLastAccepted.
func (mr *MockStateMockRecorder) GetLastAccepted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAccepted", reflect.TypeOf((*MockState)(nil).GetLastAccepted))
}

// GetNextStakerChangeTime mocks base method.
func (m *MockState) GetNextStakerChangeTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextStakerChangeTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextStakerChangeTime indicates an expected call of GetNextStakerChangeTime.
func (mr *MockStateMockRecorder) GetNextStakerChangeTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextStakerChangeTime", reflect.TypeOf((*MockState)(nil).GetNextStakerChangeTime))
}

// GetRewardUTXOs mocks base method.
func (m *MockState) GetRewardUTXOs(txID ids.ID) ([]*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardUTXOs", txID)
	ret0, _ := ret[0].([]*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardUTXOs indicates an expected call of GetRewardUTXOs.
func (mr *MockStateMockRecorder) GetRewardUTXOs(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardUTXOs", reflect.TypeOf((*MockState)(nil).GetRewardUTXOs), txID)
}

// GetStartTime mocks base method.
func (m *MockState) GetStartTime(nodeID ids.NodeID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartTime", nodeID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartTime indicates an expected call of GetStartTime.
func (mr *MockStateMockRecorder) GetStartTime(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartTime", reflect.TypeOf((*MockState)(nil).GetStartTime), nodeID)
}

// GetStatelessBlock mocks base method.
func (m *MockState) GetStatelessBlock(blockID ids.ID) (stateless.Block, choices.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatelessBlock", blockID)
	ret0, _ := ret[0].(stateless.Block)
	ret1, _ := ret[1].(choices.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatelessBlock indicates an expected call of GetStatelessBlock.
func (mr *MockStateMockRecorder) GetStatelessBlock(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatelessBlock", reflect.TypeOf((*MockState)(nil).GetStatelessBlock), blockID)
}

// GetSubnets mocks base method.
func (m *MockState) GetSubnets() ([]*signed.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnets")
	ret0, _ := ret[0].([]*signed.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnets indicates an expected call of GetSubnets.
func (mr *MockStateMockRecorder) GetSubnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnets", reflect.TypeOf((*MockState)(nil).GetSubnets))
}

// GetTimestamp mocks base method.
func (m *MockState) GetTimestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockStateMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockState)(nil).GetTimestamp))
}

// GetTx mocks base method.
func (m *MockState) GetTx(txID ids.ID) (*signed.Tx, status.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", txID)
	ret0, _ := ret[0].(*signed.Tx)
	ret1, _ := ret[1].(status.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTx indicates an expected call of GetTx.
func (mr *MockStateMockRecorder) GetTx(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockState)(nil).GetTx), txID)
}

// GetUTXO mocks base method.
func (m *MockState) GetUTXO(utxoID ids.ID) (*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUTXO", utxoID)
	ret0, _ := ret[0].(*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUTXO indicates an expected call of GetUTXO.
func (mr *MockStateMockRecorder) GetUTXO(utxoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUTXO", reflect.TypeOf((*MockState)(nil).GetUTXO), utxoID)
}

// GetUptime mocks base method.
func (m *MockState) GetUptime(nodeID ids.NodeID) (time.Duration, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUptime", nodeID)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUptime indicates an expected call of GetUptime.
func (mr *MockStateMockRecorder) GetUptime(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUptime", reflect.TypeOf((*MockState)(nil).GetUptime), nodeID)
}

// GetValidatorWeightDiffs mocks base method.
func (m *MockState) GetValidatorWeightDiffs(height uint64, subnetID ids.ID) (map[ids.NodeID]*transactions.ValidatorWeightDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorWeightDiffs", height, subnetID)
	ret0, _ := ret[0].(map[ids.NodeID]*transactions.ValidatorWeightDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorWeightDiffs indicates an expected call of GetValidatorWeightDiffs.
func (mr *MockStateMockRecorder) GetValidatorWeightDiffs(height, subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorWeightDiffs", reflect.TypeOf((*MockState)(nil).GetValidatorWeightDiffs), height, subnetID)
}

// Load mocks base method.
func (m *MockState) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockStateMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockState)(nil).Load))
}

// MaxStakeAmount mocks base method.
func (m *MockState) MaxStakeAmount(subnetID ids.ID, nodeID ids.NodeID, startTime, endTime time.Time) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxStakeAmount", subnetID, nodeID, startTime, endTime)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxStakeAmount indicates an expected call of MaxStakeAmount.
func (mr *MockStateMockRecorder) MaxStakeAmount(subnetID, nodeID, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxStakeAmount", reflect.TypeOf((*MockState)(nil).MaxStakeAmount), subnetID, nodeID, startTime, endTime)
}

// PendingStakerChainState mocks base method.
func (m *MockState) PendingStakerChainState() transactions.PendingStakerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStakerChainState")
	ret0, _ := ret[0].(transactions.PendingStakerState)
	return ret0
}

// PendingStakerChainState indicates an expected call of PendingStakerChainState.
func (mr *MockStateMockRecorder) PendingStakerChainState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStakerChainState", reflect.TypeOf((*MockState)(nil).PendingStakerChainState))
}

// SetCurrentStakerChainState mocks base method.
func (m *MockState) SetCurrentStakerChainState(cs transactions.CurrentStakerState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentStakerChainState", cs)
}

// SetCurrentStakerChainState indicates an expected call of SetCurrentStakerChainState.
func (mr *MockStateMockRecorder) SetCurrentStakerChainState(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentStakerChainState", reflect.TypeOf((*MockState)(nil).SetCurrentStakerChainState), cs)
}

// SetCurrentSupply mocks base method.
func (m *MockState) SetCurrentSupply(cs uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentSupply", cs)
}

// SetCurrentSupply indicates an expected call of SetCurrentSupply.
func (mr *MockStateMockRecorder) SetCurrentSupply(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentSupply", reflect.TypeOf((*MockState)(nil).SetCurrentSupply), cs)
}

// SetHeight mocks base method.
func (m *MockState) SetHeight(height uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeight", height)
}

// SetHeight indicates an expected call of SetHeight.
func (mr *MockStateMockRecorder) SetHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeight", reflect.TypeOf((*MockState)(nil).SetHeight), height)
}

// SetLastAccepted mocks base method.
func (m *MockState) SetLastAccepted(arg0 ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastAccepted", arg0)
}

// SetLastAccepted indicates an expected call of SetLastAccepted.
func (mr *MockStateMockRecorder) SetLastAccepted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastAccepted", reflect.TypeOf((*MockState)(nil).SetLastAccepted), arg0)
}

// SetPendingStakerChainState mocks base method.
func (m *MockState) SetPendingStakerChainState(ps transactions.PendingStakerState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPendingStakerChainState", ps)
}

// SetPendingStakerChainState indicates an expected call of SetPendingStakerChainState.
func (mr *MockStateMockRecorder) SetPendingStakerChainState(ps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingStakerChainState", reflect.TypeOf((*MockState)(nil).SetPendingStakerChainState), ps)
}

// SetTimestamp mocks base method.
func (m *MockState) SetTimestamp(tm time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimestamp", tm)
}

// SetTimestamp indicates an expected call of SetTimestamp.
func (mr *MockStateMockRecorder) SetTimestamp(tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamp", reflect.TypeOf((*MockState)(nil).SetTimestamp), tm)
}

// SetUptime mocks base method.
func (m *MockState) SetUptime(nodeID ids.NodeID, upDuration time.Duration, lastUpdated time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUptime", nodeID, upDuration, lastUpdated)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUptime indicates an expected call of SetUptime.
func (mr *MockStateMockRecorder) SetUptime(nodeID, upDuration, lastUpdated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUptime", reflect.TypeOf((*MockState)(nil).SetUptime), nodeID, upDuration, lastUpdated)
}

// ShouldInit mocks base method.
func (m *MockState) ShouldInit() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldInit")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldInit indicates an expected call of ShouldInit.
func (mr *MockStateMockRecorder) ShouldInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldInit", reflect.TypeOf((*MockState)(nil).ShouldInit))
}

// Sync mocks base method.
func (m *MockState) Sync(genesisBytes []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", genesisBytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockStateMockRecorder) Sync(genesisBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockState)(nil).Sync), genesisBytes)
}

// UTXOIDs mocks base method.
func (m *MockState) UTXOIDs(addr []byte, previous ids.ID, limit int) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UTXOIDs", addr, previous, limit)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UTXOIDs indicates an expected call of UTXOIDs.
func (mr *MockStateMockRecorder) UTXOIDs(addr, previous, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UTXOIDs", reflect.TypeOf((*MockState)(nil).UTXOIDs), addr, previous, limit)
}

// Write mocks base method.
func (m *MockState) Write() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStateMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockState)(nil).Write))
}
