// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/state/AAAAA.go

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockCurrentStakers is a mock of CurrentStakers interface.
type MockCurrentStakers struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentStakersMockRecorder
}

// MockCurrentStakersMockRecorder is the mock recorder for MockCurrentStakers.
type MockCurrentStakersMockRecorder struct {
	mock *MockCurrentStakers
}

// NewMockCurrentStakers creates a new mock instance.
func NewMockCurrentStakers(ctrl *gomock.Controller) *MockCurrentStakers {
	mock := &MockCurrentStakers{ctrl: ctrl}
	mock.recorder = &MockCurrentStakersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentStakers) EXPECT() *MockCurrentStakersMockRecorder {
	return m.recorder
}

// DeleteCurrentDelegator mocks base method.
func (m *MockCurrentStakers) DeleteCurrentDelegator(staker *Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCurrentDelegator", staker)
}

// DeleteCurrentDelegator indicates an expected call of DeleteCurrentDelegator.
func (mr *MockCurrentStakersMockRecorder) DeleteCurrentDelegator(staker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrentDelegator", reflect.TypeOf((*MockCurrentStakers)(nil).DeleteCurrentDelegator), staker)
}

// DeleteCurrentValidator mocks base method.
func (m *MockCurrentStakers) DeleteCurrentValidator(staker *Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCurrentValidator", staker)
}

// DeleteCurrentValidator indicates an expected call of DeleteCurrentValidator.
func (mr *MockCurrentStakersMockRecorder) DeleteCurrentValidator(staker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrentValidator", reflect.TypeOf((*MockCurrentStakers)(nil).DeleteCurrentValidator), staker)
}

// GetCurrentDelegatorIterator mocks base method.
func (m *MockCurrentStakers) GetCurrentDelegatorIterator(subnetID ids.ID, nodeID ids.NodeID) (StakerIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentDelegatorIterator", subnetID, nodeID)
	ret0, _ := ret[0].(StakerIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentDelegatorIterator indicates an expected call of GetCurrentDelegatorIterator.
func (mr *MockCurrentStakersMockRecorder) GetCurrentDelegatorIterator(subnetID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentDelegatorIterator", reflect.TypeOf((*MockCurrentStakers)(nil).GetCurrentDelegatorIterator), subnetID, nodeID)
}

// GetCurrentStakerIterator mocks base method.
func (m *MockCurrentStakers) GetCurrentStakerIterator() (StakerIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentStakerIterator")
	ret0, _ := ret[0].(StakerIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentStakerIterator indicates an expected call of GetCurrentStakerIterator.
func (mr *MockCurrentStakersMockRecorder) GetCurrentStakerIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStakerIterator", reflect.TypeOf((*MockCurrentStakers)(nil).GetCurrentStakerIterator))
}

// GetCurrentValidator mocks base method.
func (m *MockCurrentStakers) GetCurrentValidator(subnetID ids.ID, nodeID ids.NodeID) (*Staker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentValidator", subnetID, nodeID)
	ret0, _ := ret[0].(*Staker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentValidator indicates an expected call of GetCurrentValidator.
func (mr *MockCurrentStakersMockRecorder) GetCurrentValidator(subnetID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentValidator", reflect.TypeOf((*MockCurrentStakers)(nil).GetCurrentValidator), subnetID, nodeID)
}

// PutCurrentDelegator mocks base method.
func (m *MockCurrentStakers) PutCurrentDelegator(staker *Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCurrentDelegator", staker)
}

// PutCurrentDelegator indicates an expected call of PutCurrentDelegator.
func (mr *MockCurrentStakersMockRecorder) PutCurrentDelegator(staker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCurrentDelegator", reflect.TypeOf((*MockCurrentStakers)(nil).PutCurrentDelegator), staker)
}

// PutCurrentValidator mocks base method.
func (m *MockCurrentStakers) PutCurrentValidator(staker *Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCurrentValidator", staker)
}

// PutCurrentValidator indicates an expected call of PutCurrentValidator.
func (mr *MockCurrentStakersMockRecorder) PutCurrentValidator(staker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCurrentValidator", reflect.TypeOf((*MockCurrentStakers)(nil).PutCurrentValidator), staker)
}