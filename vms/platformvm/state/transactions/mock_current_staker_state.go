// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/state/transactions/current_staker_state.go

// Package transactions is a generated GoMock package.
package transactions

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	validators "github.com/ava-labs/avalanchego/snow/validators"
	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "github.com/golang/mock/gomock"
)

// MockCurrentStakerState is a mock of CurrentStakerState interface.
type MockCurrentStakerState struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentStakerStateMockRecorder
}

// MockCurrentStakerStateMockRecorder is the mock recorder for MockCurrentStakerState.
type MockCurrentStakerStateMockRecorder struct {
	mock *MockCurrentStakerState
}

// NewMockCurrentStakerState creates a new mock instance.
func NewMockCurrentStakerState(ctrl *gomock.Controller) *MockCurrentStakerState {
	mock := &MockCurrentStakerState{ctrl: ctrl}
	mock.recorder = &MockCurrentStakerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentStakerState) EXPECT() *MockCurrentStakerStateMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockCurrentStakerState) Apply(arg0 Content) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", arg0)
}

// Apply indicates an expected call of Apply.
func (mr *MockCurrentStakerStateMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockCurrentStakerState)(nil).Apply), arg0)
}

// DeleteNextStaker mocks base method.
func (m *MockCurrentStakerState) DeleteNextStaker() (CurrentStakerState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNextStaker")
	ret0, _ := ret[0].(CurrentStakerState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNextStaker indicates an expected call of DeleteNextStaker.
func (mr *MockCurrentStakerStateMockRecorder) DeleteNextStaker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNextStaker", reflect.TypeOf((*MockCurrentStakerState)(nil).DeleteNextStaker))
}

// GetNextStaker mocks base method.
func (m *MockCurrentStakerState) GetNextStaker() (*txs.Tx, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextStaker")
	ret0, _ := ret[0].(*txs.Tx)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNextStaker indicates an expected call of GetNextStaker.
func (mr *MockCurrentStakerStateMockRecorder) GetNextStaker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextStaker", reflect.TypeOf((*MockCurrentStakerState)(nil).GetNextStaker))
}

// GetStaker mocks base method.
func (m *MockCurrentStakerState) GetStaker(txID ids.ID) (*txs.Tx, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaker", txID)
	ret0, _ := ret[0].(*txs.Tx)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStaker indicates an expected call of GetStaker.
func (mr *MockCurrentStakerStateMockRecorder) GetStaker(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaker", reflect.TypeOf((*MockCurrentStakerState)(nil).GetStaker), txID)
}

// GetValidator mocks base method.
func (m *MockCurrentStakerState) GetValidator(nodeID ids.NodeID) (currentValidator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", nodeID)
	ret0, _ := ret[0].(currentValidator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockCurrentStakerStateMockRecorder) GetValidator(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockCurrentStakerState)(nil).GetValidator), nodeID)
}

// Stakers mocks base method.
func (m *MockCurrentStakerState) Stakers() []*txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stakers")
	ret0, _ := ret[0].([]*txs.Tx)
	return ret0
}

// Stakers indicates an expected call of Stakers.
func (mr *MockCurrentStakerStateMockRecorder) Stakers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stakers", reflect.TypeOf((*MockCurrentStakerState)(nil).Stakers))
}

// UpdateStakers mocks base method.
func (m *MockCurrentStakerState) UpdateStakers(addValidators, addDelegators []*ValidatorReward, addSubnetValidators []*txs.Tx, numTxsToRemove int) (CurrentStakerState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStakers", addValidators, addDelegators, addSubnetValidators, numTxsToRemove)
	ret0, _ := ret[0].(CurrentStakerState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStakers indicates an expected call of UpdateStakers.
func (mr *MockCurrentStakerStateMockRecorder) UpdateStakers(addValidators, addDelegators, addSubnetValidators, numTxsToRemove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStakers", reflect.TypeOf((*MockCurrentStakerState)(nil).UpdateStakers), addValidators, addDelegators, addSubnetValidators, numTxsToRemove)
}

// ValidatorSet mocks base method.
func (m *MockCurrentStakerState) ValidatorSet(subnetID ids.ID) (validators.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorSet", subnetID)
	ret0, _ := ret[0].(validators.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatorSet indicates an expected call of ValidatorSet.
func (mr *MockCurrentStakerStateMockRecorder) ValidatorSet(subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorSet", reflect.TypeOf((*MockCurrentStakerState)(nil).ValidatorSet), subnetID)
}
