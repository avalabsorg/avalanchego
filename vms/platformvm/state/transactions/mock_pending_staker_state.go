// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/state/transactions/pending_staker_state.go

// Package transactions is a generated GoMock package.
package transactions

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "github.com/golang/mock/gomock"
)

// MockPendingStakerState is a mock of PendingStakerState interface.
type MockPendingStakerState struct {
	ctrl     *gomock.Controller
	recorder *MockPendingStakerStateMockRecorder
}

// MockPendingStakerStateMockRecorder is the mock recorder for MockPendingStakerState.
type MockPendingStakerStateMockRecorder struct {
	mock *MockPendingStakerState
}

// NewMockPendingStakerState creates a new mock instance.
func NewMockPendingStakerState(ctrl *gomock.Controller) *MockPendingStakerState {
	mock := &MockPendingStakerState{ctrl: ctrl}
	mock.recorder = &MockPendingStakerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPendingStakerState) EXPECT() *MockPendingStakerStateMockRecorder {
	return m.recorder
}

// AddStaker mocks base method.
func (m *MockPendingStakerState) AddStaker(addStakerTx *txs.Tx) PendingStakerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStaker", addStakerTx)
	ret0, _ := ret[0].(PendingStakerState)
	return ret0
}

// AddStaker indicates an expected call of AddStaker.
func (mr *MockPendingStakerStateMockRecorder) AddStaker(addStakerTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStaker", reflect.TypeOf((*MockPendingStakerState)(nil).AddStaker), addStakerTx)
}

// Apply mocks base method.
func (m *MockPendingStakerState) Apply(arg0 Content) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", arg0)
}

// Apply indicates an expected call of Apply.
func (mr *MockPendingStakerStateMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockPendingStakerState)(nil).Apply), arg0)
}

// DeleteStakers mocks base method.
func (m *MockPendingStakerState) DeleteStakers(numToRemove int) PendingStakerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStakers", numToRemove)
	ret0, _ := ret[0].(PendingStakerState)
	return ret0
}

// DeleteStakers indicates an expected call of DeleteStakers.
func (mr *MockPendingStakerStateMockRecorder) DeleteStakers(numToRemove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStakers", reflect.TypeOf((*MockPendingStakerState)(nil).DeleteStakers), numToRemove)
}

// GetValidator mocks base method.
func (m *MockPendingStakerState) GetValidator(nodeID ids.NodeID) validatorIntf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", nodeID)
	ret0, _ := ret[0].(validatorIntf)
	return ret0
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockPendingStakerStateMockRecorder) GetValidator(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockPendingStakerState)(nil).GetValidator), nodeID)
}

// GetValidatorTx mocks base method.
func (m *MockPendingStakerState) GetValidatorTx(nodeID ids.NodeID) (*txs.AddValidatorTx, ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorTx", nodeID)
	ret0, _ := ret[0].(*txs.AddValidatorTx)
	ret1, _ := ret[1].(ids.ID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValidatorTx indicates an expected call of GetValidatorTx.
func (mr *MockPendingStakerStateMockRecorder) GetValidatorTx(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorTx", reflect.TypeOf((*MockPendingStakerState)(nil).GetValidatorTx), nodeID)
}

// Stakers mocks base method.
func (m *MockPendingStakerState) Stakers() []*txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stakers")
	ret0, _ := ret[0].([]*txs.Tx)
	return ret0
}

// Stakers indicates an expected call of Stakers.
func (mr *MockPendingStakerStateMockRecorder) Stakers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stakers", reflect.TypeOf((*MockPendingStakerState)(nil).Stakers))
}
