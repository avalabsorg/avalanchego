// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/txs/mempool/mempool.go

// Package mempool is a generated GoMock package.
package mempool

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockTimer is a mock of BlockTimer interface.
type MockBlockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockBlockTimerMockRecorder
}

// MockBlockTimerMockRecorder is the mock recorder for MockBlockTimer.
type MockBlockTimerMockRecorder struct {
	mock *MockBlockTimer
}

// NewMockBlockTimer creates a new mock instance.
func NewMockBlockTimer(ctrl *gomock.Controller) *MockBlockTimer {
	mock := &MockBlockTimer{ctrl: ctrl}
	mock.recorder = &MockBlockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockTimer) EXPECT() *MockBlockTimerMockRecorder {
	return m.recorder
}

// ResetBlockTimer mocks base method.
func (m *MockBlockTimer) ResetBlockTimer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetBlockTimer")
}

// ResetBlockTimer indicates an expected call of ResetBlockTimer.
func (mr *MockBlockTimerMockRecorder) ResetBlockTimer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBlockTimer", reflect.TypeOf((*MockBlockTimer)(nil).ResetBlockTimer))
}

// MockMempool is a mock of Mempool interface.
type MockMempool struct {
	ctrl     *gomock.Controller
	recorder *MockMempoolMockRecorder
}

// MockMempoolMockRecorder is the mock recorder for MockMempool.
type MockMempoolMockRecorder struct {
	mock *MockMempool
}

// NewMockMempool creates a new mock instance.
func NewMockMempool(ctrl *gomock.Controller) *MockMempool {
	mock := &MockMempool{ctrl: ctrl}
	mock.recorder = &MockMempoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMempool) EXPECT() *MockMempoolMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMempool) Add(tx *txs.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMempoolMockRecorder) Add(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMempool)(nil).Add), tx)
}

// DisableAdding mocks base method.
func (m *MockMempool) DisableAdding() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DisableAdding")
}

// DisableAdding indicates an expected call of DisableAdding.
func (mr *MockMempoolMockRecorder) DisableAdding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAdding", reflect.TypeOf((*MockMempool)(nil).DisableAdding))
}

// EnableAdding mocks base method.
func (m *MockMempool) EnableAdding() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableAdding")
}

// EnableAdding indicates an expected call of EnableAdding.
func (mr *MockMempoolMockRecorder) EnableAdding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAdding", reflect.TypeOf((*MockMempool)(nil).EnableAdding))
}

// Get mocks base method.
func (m *MockMempool) Get(txID ids.ID) *txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", txID)
	ret0, _ := ret[0].(*txs.Tx)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockMempoolMockRecorder) Get(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMempool)(nil).Get), txID)
}

// GetDropReason mocks base method.
func (m *MockMempool) GetDropReason(txID ids.ID) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropReason", txID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDropReason indicates an expected call of GetDropReason.
func (mr *MockMempoolMockRecorder) GetDropReason(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropReason", reflect.TypeOf((*MockMempool)(nil).GetDropReason), txID)
}

// Has mocks base method.
func (m *MockMempool) Has(txID ids.ID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", txID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockMempoolMockRecorder) Has(txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockMempool)(nil).Has), txID)
}

// HasApricotDecisionTxs mocks base method.
func (m *MockMempool) HasApricotDecisionTxs() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasApricotDecisionTxs")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasApricotDecisionTxs indicates an expected call of HasApricotDecisionTxs.
func (mr *MockMempoolMockRecorder) HasApricotDecisionTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasApricotDecisionTxs", reflect.TypeOf((*MockMempool)(nil).HasApricotDecisionTxs))
}

// HasStakerTx mocks base method.
func (m *MockMempool) HasStakerTx() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStakerTx")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStakerTx indicates an expected call of HasStakerTx.
func (mr *MockMempoolMockRecorder) HasStakerTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStakerTx", reflect.TypeOf((*MockMempool)(nil).HasStakerTx))
}

// HasTxs mocks base method.
func (m *MockMempool) HasTxs() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTxs")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTxs indicates an expected call of HasTxs.
func (mr *MockMempoolMockRecorder) HasTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTxs", reflect.TypeOf((*MockMempool)(nil).HasTxs))
}

// MarkDropped mocks base method.
func (m *MockMempool) MarkDropped(txID ids.ID, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkDropped", txID, reason)
}

// MarkDropped indicates an expected call of MarkDropped.
func (mr *MockMempoolMockRecorder) MarkDropped(txID, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDropped", reflect.TypeOf((*MockMempool)(nil).MarkDropped), txID, reason)
}

// PeekApricotDecisionTxs mocks base method.
func (m *MockMempool) PeekApricotDecisionTxs(maxTxsBytes int) []*txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekApricotDecisionTxs", maxTxsBytes)
	ret0, _ := ret[0].([]*txs.Tx)
	return ret0
}

// PeekApricotDecisionTxs indicates an expected call of PeekApricotDecisionTxs.
func (mr *MockMempoolMockRecorder) PeekApricotDecisionTxs(maxTxsBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekApricotDecisionTxs", reflect.TypeOf((*MockMempool)(nil).PeekApricotDecisionTxs), maxTxsBytes)
}

// PeekStakerTx mocks base method.
func (m *MockMempool) PeekStakerTx() *txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekStakerTx")
	ret0, _ := ret[0].(*txs.Tx)
	return ret0
}

// PeekStakerTx indicates an expected call of PeekStakerTx.
func (mr *MockMempoolMockRecorder) PeekStakerTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekStakerTx", reflect.TypeOf((*MockMempool)(nil).PeekStakerTx))
}

// PeekTxs mocks base method.
func (m *MockMempool) PeekTxs(maxTxsBytes int) []*txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekTxs", maxTxsBytes)
	ret0, _ := ret[0].([]*txs.Tx)
	return ret0
}

// PeekTxs indicates an expected call of PeekTxs.
func (mr *MockMempoolMockRecorder) PeekTxs(maxTxsBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekTxs", reflect.TypeOf((*MockMempool)(nil).PeekTxs), maxTxsBytes)
}

// RemoveTxs mocks base method.
func (m *MockMempool) RemoveTxs(txs []*txs.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveTxs", txs)
}

// RemoveTxs indicates an expected call of RemoveTxs.
func (mr *MockMempoolMockRecorder) RemoveTxs(txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTxs", reflect.TypeOf((*MockMempool)(nil).RemoveTxs), txs)
}
