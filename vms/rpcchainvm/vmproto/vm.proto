syntax = "proto3";
package vmproto;
option go_package = "github.com/ava-labs/avalanchego/vms/rpcchainvm/vmproto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


// To compile: protoc --go_out=plugins=grpc:. vm.proto

message InitializeRequest {
    uint32 networkID = 1;
    bytes subnetID = 2;
    bytes chainID = 3;
    bytes nodeID = 4;
    bytes xChainID = 5;
    bytes avaxAssetID = 6;
    bytes genesisBytes = 7;
    bytes upgradeBytes = 8;
    bytes configBytes = 9;

    repeated VersionedDBServer dbServers = 10;
    uint32 engineServer = 11;
    uint32 keystoreServer = 12;
    uint32 sharedMemoryServer = 13;
    uint32 bcLookupServer = 14;
    uint32 snLookupServer = 15;
    uint32 appSenderServer = 16;
}

message InitializeResponse {
    bytes lastAcceptedID = 1;
    bytes lastAcceptedParentID = 2;
    uint32 status = 3;
    uint64 height = 4;
    bytes bytes = 5;
    bytes timestamp = 6;
}

message VersionedDBServer {
    uint32 dbServer = 1;
    string version = 2;
}

message CreateHandlersResponse {
    repeated Handler handlers = 1;
}

message CreateStaticHandlersResponse {
    repeated Handler handlers = 1;
}

message Handler {
    string prefix = 1;
    uint32 lockOptions = 2;
    uint32 server = 3;
}

message BuildBlockResponse {
    bytes id = 1;
    bytes parentID = 2;
    bytes bytes = 3;
    uint64 height = 4;
    bytes timestamp = 5;
    // status is always processing
}

message ParseBlockRequest {
    bytes bytes = 1;
}

message ParseBlockResponse {
    bytes id = 1;
    bytes parentID = 2;
    uint32 status = 3;
    uint64 height = 4;
    bytes timestamp = 5;
}

message GetBlockRequest {
    bytes id = 1;
}

message GetBlockResponse {
    bytes parentID = 1;
    bytes bytes = 2;
    uint32 status = 3;
    uint64 height = 4;
    bytes timestamp = 5;
}

message SetPreferenceRequest {
    bytes id = 1;
}

message BlockVerifyRequest {
    bytes bytes = 1;
}

message BlockVerifyResponse {
    bytes timestamp = 1;
}

message BlockAcceptRequest {
    bytes id = 1;
}

message BlockRejectRequest {
    bytes id = 1;
}

message HealthResponse {
    string details = 1;
}

message VersionResponse {
    string version = 1;
}

message AppRequestMsg {
    // The node that sent us this request
    bytes nodeID = 1;
    // The ID of this request
    uint32 requestID = 2;
    // deadline for this request
    bytes deadline = 3;
    // The request body
    bytes request = 4;
}

message AppRequestFailedMsg {
    // The node that we failed to get a response from
    bytes nodeID = 1;
    // The ID of the request we sent and didn't get a response to
    uint32 requestID = 2;
}

message AppResponseMsg {
    // The node that we got a response from
    bytes nodeID = 1;
    // Request ID of request that this is in response to
    uint32 requestID = 2;
    // The response body
    bytes response = 3;
}

message AppGossipMsg {
    // The node that sent us a gossip message
    bytes nodeID = 1;
    // The message body
    bytes msg = 2;
}

message ConnectedRequest {
    bytes nodeID = 1; 
}
 
message DisconnectedRequest {
    bytes nodeID = 1; 
}

message GetAncestorsRequest {
    bytes blkID = 1;
    int32 maxBlocksNum = 2;
    int32 maxBlocksSize = 3;
    int64 maxBlocksRetrivalTime = 4;
}

message GetAncestorsResponse {
    repeated bytes blksBytes = 1;
}

message BatchedParseBlockRequest {
    repeated bytes request = 1;
}

message BatchedParseBlockResponse {
    repeated ParseBlockResponse response = 1;
}

// The metrics message defintions are copied from:
// https://github.com/prometheus/client_model/blob/master/io/prometheus/client/metrics.proto
// TODO: directly import this dependency

message LabelPair {
  optional string name  = 1;
  optional string value = 2;
}

enum MetricType {
  COUNTER    = 0;
  GAUGE      = 1;
  SUMMARY    = 2;
  UNTYPED    = 3;
  HISTOGRAM  = 4;
}

message Gauge {
  optional double value = 1;
}

message Counter {
  optional double   value    = 1;
  optional Exemplar exemplar = 2;
}

message Quantile {
  optional double quantile = 1;
  optional double value    = 2;
}

message Summary {
  optional uint64   sample_count = 1;
  optional double   sample_sum   = 2;
  repeated Quantile quantile     = 3;
}

message Untyped {
  optional double value = 1;
}

message Histogram {
  optional uint64 sample_count = 1;
  optional double sample_sum   = 2;
  repeated Bucket bucket       = 3; // Ordered in increasing order of upper_bound, +Inf bucket is optional.
}

message Bucket {
  optional uint64   cumulative_count = 1; // Cumulative in increasing order.
  optional double   upper_bound      = 2; // Inclusive.
  optional Exemplar exemplar         = 3;
}

message Exemplar {
  repeated LabelPair                 label     = 1;
  optional double                    value     = 2;
  optional google.protobuf.Timestamp timestamp = 3; // OpenMetrics-style.
}

message Metric {
  repeated LabelPair label        = 1;
  optional Gauge     gauge        = 2;
  optional Counter   counter      = 3;
  optional Summary   summary      = 4;
  optional Untyped   untyped      = 5;
  optional Histogram histogram    = 7;
  optional int64     timestamp_ms = 6;
}

message MetricFamily {
  optional string     name   = 1;
  optional string     help   = 2;
  optional MetricType type   = 3;
  repeated Metric     metric = 4;
}

message GatherResponse {
    repeated MetricFamily metricFamilies = 1;
}

service VM {
    rpc Initialize(InitializeRequest) returns (InitializeResponse);
    rpc Bootstrapping(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc Bootstrapped(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc Shutdown(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc CreateHandlers(google.protobuf.Empty) returns (CreateHandlersResponse);
    rpc CreateStaticHandlers(google.protobuf.Empty) returns (CreateStaticHandlersResponse);
    rpc Connected(ConnectedRequest) returns (google.protobuf.Empty);
    rpc Disconnected(DisconnectedRequest) returns (google.protobuf.Empty);
    rpc BuildBlock(google.protobuf.Empty) returns (BuildBlockResponse);
    rpc ParseBlock(ParseBlockRequest) returns (ParseBlockResponse);
    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
    rpc SetPreference(SetPreferenceRequest) returns (google.protobuf.Empty);
    rpc Health(google.protobuf.Empty) returns (HealthResponse);
    rpc Version(google.protobuf.Empty) returns (VersionResponse);
    rpc AppRequest(AppRequestMsg) returns (google.protobuf.Empty);
    rpc AppRequestFailed(AppRequestFailedMsg) returns (google.protobuf.Empty);
    rpc AppResponse(AppResponseMsg) returns (google.protobuf.Empty);
    rpc AppGossip(AppGossipMsg) returns (google.protobuf.Empty);

    rpc Gather(google.protobuf.Empty) returns (GatherResponse);

    rpc BlockVerify(BlockVerifyRequest) returns (BlockVerifyResponse);
    rpc BlockAccept(BlockAcceptRequest) returns (google.protobuf.Empty);
    rpc BlockReject(BlockRejectRequest) returns (google.protobuf.Empty);

    rpc GetAncestors(GetAncestorsRequest) returns (GetAncestorsResponse);
    rpc BatchedParseBlock(BatchedParseBlockRequest) returns (BatchedParseBlockResponse);
}
