// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: vmtest/vm.proto

package vmtest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VMTestClient is the client API for VMTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMTestClient interface {
	// CreateHandlers populates a slice of http handlers exposed by the subnet which
	// will be routed by the apiserver.
	CreateHandlers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateHandlersResponse, error)
}

type vMTestClient struct {
	cc grpc.ClientConnInterface
}

func NewVMTestClient(cc grpc.ClientConnInterface) VMTestClient {
	return &vMTestClient{cc}
}

func (c *vMTestClient) CreateHandlers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateHandlersResponse, error) {
	out := new(CreateHandlersResponse)
	err := c.cc.Invoke(ctx, "/vmtest.VMTest/CreateHandlers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMTestServer is the server API for VMTest service.
// All implementations must embed UnimplementedVMTestServer
// for forward compatibility
type VMTestServer interface {
	// CreateHandlers populates a slice of http handlers exposed by the subnet which
	// will be routed by the apiserver.
	CreateHandlers(context.Context, *emptypb.Empty) (*CreateHandlersResponse, error)
	mustEmbedUnimplementedVMTestServer()
}

// UnimplementedVMTestServer must be embedded to have forward compatible implementations.
type UnimplementedVMTestServer struct {
}

func (UnimplementedVMTestServer) CreateHandlers(context.Context, *emptypb.Empty) (*CreateHandlersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHandlers not implemented")
}
func (UnimplementedVMTestServer) mustEmbedUnimplementedVMTestServer() {}

// UnsafeVMTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMTestServer will
// result in compilation errors.
type UnsafeVMTestServer interface {
	mustEmbedUnimplementedVMTestServer()
}

func RegisterVMTestServer(s grpc.ServiceRegistrar, srv VMTestServer) {
	s.RegisterService(&VMTest_ServiceDesc, srv)
}

func _VMTest_CreateHandlers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMTestServer).CreateHandlers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmtest.VMTest/CreateHandlers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMTestServer).CreateHandlers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VMTest_ServiceDesc is the grpc.ServiceDesc for VMTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vmtest.VMTest",
	HandlerType: (*VMTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHandlers",
			Handler:    _VMTest_CreateHandlers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vmtest/vm.proto",
}
