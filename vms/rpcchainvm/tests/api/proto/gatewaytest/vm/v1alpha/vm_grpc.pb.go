// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gatewaytest/vm/v1alpha/vm.proto

package v1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestVMClient is the client API for TestVM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestVMClient interface {
	// CreateHandlers populates a slice of http handlers exposed by the subnet which
	// will be routed by the apiserver.
	CreateHandlers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateHandlersResponse, error)
}

type testVMClient struct {
	cc grpc.ClientConnInterface
}

func NewTestVMClient(cc grpc.ClientConnInterface) TestVMClient {
	return &testVMClient{cc}
}

func (c *testVMClient) CreateHandlers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateHandlersResponse, error) {
	out := new(CreateHandlersResponse)
	err := c.cc.Invoke(ctx, "/gatewaytest.vm.v1alpha.TestVM/CreateHandlers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestVMServer is the server API for TestVM service.
// All implementations must embed UnimplementedTestVMServer
// for forward compatibility
type TestVMServer interface {
	// CreateHandlers populates a slice of http handlers exposed by the subnet which
	// will be routed by the apiserver.
	CreateHandlers(context.Context, *emptypb.Empty) (*CreateHandlersResponse, error)
	mustEmbedUnimplementedTestVMServer()
}

// UnimplementedTestVMServer must be embedded to have forward compatible implementations.
type UnimplementedTestVMServer struct {
}

func (UnimplementedTestVMServer) CreateHandlers(context.Context, *emptypb.Empty) (*CreateHandlersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHandlers not implemented")
}
func (UnimplementedTestVMServer) mustEmbedUnimplementedTestVMServer() {}

// UnsafeTestVMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestVMServer will
// result in compilation errors.
type UnsafeTestVMServer interface {
	mustEmbedUnimplementedTestVMServer()
}

func RegisterTestVMServer(s grpc.ServiceRegistrar, srv TestVMServer) {
	s.RegisterService(&TestVM_ServiceDesc, srv)
}

func _TestVM_CreateHandlers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestVMServer).CreateHandlers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gatewaytest.vm.v1alpha.TestVM/CreateHandlers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestVMServer).CreateHandlers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TestVM_ServiceDesc is the grpc.ServiceDesc for TestVM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestVM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatewaytest.vm.v1alpha.TestVM",
	HandlerType: (*TestVMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHandlers",
			Handler:    _TestVM_CreateHandlers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gatewaytest/vm/v1alpha/vm.proto",
}
