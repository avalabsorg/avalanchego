// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/snow/networking/tracker (interfaces: TimeTracker)

// Package mock_tracker is a generated GoMock package.
package tracker

import (
	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTimeTracker is a mock of TimeTracker interface
type MockTimeTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTimeTrackerMockRecorder
}

// MockTimeTrackerMockRecorder is the mock recorder for MockTimeTracker
type MockTimeTrackerMockRecorder struct {
	mock *MockTimeTracker
}

// NewMockTimeTracker creates a new mock instance
func NewMockTimeTracker(ctrl *gomock.Controller) *MockTimeTracker {
	mock := &MockTimeTracker{ctrl: ctrl}
	mock.recorder = &MockTimeTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimeTracker) EXPECT() *MockTimeTrackerMockRecorder {
	return m.recorder
}

// CumulativeAtLargeUtilization mocks base method
func (m *MockTimeTracker) CumulativeAtLargeUtilization(arg0 time.Time) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CumulativeAtLargeUtilization", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CumulativeAtLargeUtilization indicates an expected call of CumulativeAtLargeUtilization
func (mr *MockTimeTrackerMockRecorder) CumulativeAtLargeUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CumulativeAtLargeUtilization", reflect.TypeOf((*MockTimeTracker)(nil).CumulativeAtLargeUtilization), arg0)
}

// DecCPU mocks base method
func (m *MockTimeTracker) DecCPU(arg0 ids.NodeID, arg1 time.Time, arg2 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecCPU", arg0, arg1, arg2)
}

// DecCPU indicates an expected call of DecCPU
func (mr *MockTimeTrackerMockRecorder) DecCPU(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecCPU", reflect.TypeOf((*MockTimeTracker)(nil).DecCPU), arg0, arg1, arg2)
}

// IncCPU mocks base method
func (m *MockTimeTracker) IncCPU(arg0 ids.NodeID, arg1 time.Time, arg2 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCPU", arg0, arg1, arg2)
}

// IncCPU indicates an expected call of IncCPU
func (mr *MockTimeTrackerMockRecorder) IncCPU(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCPU", reflect.TypeOf((*MockTimeTracker)(nil).IncCPU), arg0, arg1, arg2)
}

// TimeUntilUtilization mocks base method
func (m *MockTimeTracker) TimeUntilUtilization(arg0 ids.NodeID, arg1 time.Time, arg2 float64) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeUntilUtilization", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TimeUntilUtilization indicates an expected call of TimeUntilUtilization
func (mr *MockTimeTrackerMockRecorder) TimeUntilUtilization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeUntilUtilization", reflect.TypeOf((*MockTimeTracker)(nil).TimeUntilUtilization), arg0, arg1, arg2)
}

// Utilization mocks base method
func (m *MockTimeTracker) Utilization(arg0 ids.NodeID, arg1 time.Time) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Utilization", arg0, arg1)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Utilization indicates an expected call of Utilization
func (mr *MockTimeTrackerMockRecorder) Utilization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Utilization", reflect.TypeOf((*MockTimeTracker)(nil).Utilization), arg0, arg1)
}
