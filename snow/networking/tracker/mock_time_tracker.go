// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/snow/networking/tracker (interfaces: TimeTracker)

// Package mock_tracker is a generated GoMock package.
package tracker

import (
	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTimeTracker is a mock of TimeTracker interface
type MockTimeTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTimeTrackerMockRecorder
}

// MockTimeTrackerMockRecorder is the mock recorder for MockTimeTracker
type MockTimeTrackerMockRecorder struct {
	mock *MockTimeTracker
}

// NewMockTimeTracker creates a new mock instance
func NewMockTimeTracker(ctrl *gomock.Controller) *MockTimeTracker {
	mock := &MockTimeTracker{ctrl: ctrl}
	mock.recorder = &MockTimeTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimeTracker) EXPECT() *MockTimeTrackerMockRecorder {
	return m.recorder
}

// CumulativeUtilization mocks base method
func (m *MockTimeTracker) CumulativeUtilization(arg0 time.Time) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CumulativeUtilization", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CumulativeUtilization indicates an expected call of CumulativeUtilization
func (mr *MockTimeTrackerMockRecorder) CumulativeUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CumulativeUtilization", reflect.TypeOf((*MockTimeTracker)(nil).CumulativeUtilization), arg0)
}

// Len mocks base method
func (m *MockTimeTracker) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockTimeTrackerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockTimeTracker)(nil).Len))
}

// ActiveWeight mocks base method
func (m *MockTimeTracker) ActiveWeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveWeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ActiveWeight indicates an expected call of ActiveWeight
func (mr *MockTimeTrackerMockRecorder) ActiveWeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveWeight", reflect.TypeOf((*MockTimeTracker)(nil).ActiveWeight))
}

// StartCPU mocks base method
func (m *MockTimeTracker) StartCPU(arg0 ids.NodeID, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCPU", arg0, arg1)
}

// StartCPU indicates an expected call of StartCPU
func (mr *MockTimeTrackerMockRecorder) StartCPU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCPU", reflect.TypeOf((*MockTimeTracker)(nil).StartCPU), arg0, arg1)
}

// StopCPU mocks base method
func (m *MockTimeTracker) StopCPU(arg0 ids.NodeID, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopCPU", arg0, arg1)
}

// StopCPU indicates an expected call of StopCPU
func (mr *MockTimeTrackerMockRecorder) StopCPU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCPU", reflect.TypeOf((*MockTimeTracker)(nil).StopCPU), arg0, arg1)
}

// TimeUntilUtilization mocks base method
func (m *MockTimeTracker) TimeUntilUtilization(arg0 ids.NodeID, arg1 time.Time, arg2 float64) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeUntilUtilization", arg0, arg1, arg2)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TimeUntilUtilization indicates an expected call of TimeUntilUtilization
func (mr *MockTimeTrackerMockRecorder) TimeUntilUtilization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeUntilUtilization", reflect.TypeOf((*MockTimeTracker)(nil).TimeUntilUtilization), arg0, arg1, arg2)
}

// Utilization mocks base method
func (m *MockTimeTracker) Utilization(arg0 ids.NodeID, arg1 time.Time) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Utilization", arg0, arg1)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Utilization indicates an expected call of Utilization
func (mr *MockTimeTrackerMockRecorder) Utilization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Utilization", reflect.TypeOf((*MockTimeTracker)(nil).Utilization), arg0, arg1)
}
