// Code generated by MockGen. DO NOT EDIT.
// Source: snow/networking/tracker/cpu_target.go

// Package mock_tracker is a generated GoMock package.
package tracker

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockCPUTargeter is a mock of CPUTargeter interface.
type MockCPUTargeter struct {
	ctrl     *gomock.Controller
	recorder *MockCPUTargeterMockRecorder
}

// MockCPUTargeterMockRecorder is the mock recorder for MockCPUTargeter.
type MockCPUTargeterMockRecorder struct {
	mock *MockCPUTargeter
}

// NewMockCPUTargeter creates a new mock instance.
func NewMockCPUTargeter(ctrl *gomock.Controller) *MockCPUTargeter {
	mock := &MockCPUTargeter{ctrl: ctrl}
	mock.recorder = &MockCPUTargeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCPUTargeter) EXPECT() *MockCPUTargeterMockRecorder {
	return m.recorder
}

// TargetCPUUsage mocks base method.
func (m *MockCPUTargeter) TargetCPUUsage(nodeID ids.NodeID) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetCPUUsage", nodeID)
	ret0, _ := ret[0].(float64)
	return ret0
}

// TargetCPUUsage indicates an expected call of TargetCPUUsage.
func (mr *MockCPUTargeterMockRecorder) TargetCPUUsage(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetCPUUsage", reflect.TypeOf((*MockCPUTargeter)(nil).TargetCPUUsage), nodeID)
}
